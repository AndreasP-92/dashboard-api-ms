name: Server Build & Push

env:
  IMAGE_NAME: dashboard-api-ms
  BRANCH_NAME: ${{ github.ref}}
  BUILD_TAG: ${{ github.sha }}
  GOOGLE_APPLICATION_CREDENTIALS: '${{ secrets.SERVICE_USER_CREDS_2 }}'

on:
  push:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: echo environment
        run: echo '${{ secrets.SERVICE_USER_CREDS_2 }}'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: hovedopgave-23
          service_account: dascboard-svc@hovedopgave-23.iam.gserviceaccount.com
          credentials_json: ${{ secrets.SERVICE_USER_CREDS_2 }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: hovedopgave-23


      - name: 'Docker auth'
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # - name: "Docker auth"
      #   run: |-
      #     gcloud auth configure-docker us-central1--docker.pkg.dev --quiet
      
      # - name: Docker Auth
      #   run: |
      #     gcloud config set artifacts/repository  dashboard-repo
      #     gcloud config set artifacts/location us-central1-docker.pkg.dev
      #     gcloud config set account dascboard-svc@hovedopgave-23.iam.gserviceaccount.com
          
      #     gcloud auth activate-service-account dascboard-svc@hovedopgave-23.iam.gserviceaccount.com --key-file=$GOOGLE_APPLICATION_CREDENTIALS --project=hovedopgave-23

      - name: Build image
        run: docker compose -f docker-compose.yml build


      - name: Push Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest us-central1-docker.pkg.dev/hovedopgave-23/dashboard-repo/${{ env.IMAGE_NAME }}:1
          docker push us-central1-docker.pkg.dev/hovedopgave-23/dashboard-repo/${{ env.IMAGE_NAME }}:1


      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yml
        env:
          KUBECONFIG: ${{ runner.workspace }}/kubeconfig.yml


      - name: Apply Kubernetes manifest file
        run: |
          export BUILD_TAG=${{ env.BUILD_TAG }}
          envsubst < manifests/gks-deployment.yml | kubectl apply -f - --validate=false
      #     envsubst < manifests/templates/config-map.yml | kubectl apply -f - -n ep-mern --kubeconfig=config.yml
      #     envsubst < manifests/templates/ingress-config.yml | kubectl apply -f - -n ep-mern --kubeconfig=config.yml
        env:
          KUBECONFIG: ${{ runner.workspace }}/kubeconfig.yml



      # - name: echo docker-compose
      #   run: cat docker-compose.yaml

      # - name: Login to Docker Repository
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ secrets.ACR_ENDPOINT }}
      #     username: ${{ secrets.ACR_USERNAME }}
      #     password: ${{ secrets.ACR_PASSWORD }}

      # - name: Create env file
      #   run: |
      #     touch .env
      #     echo "${{ secrets.SERVER_ENV_PROD }}" > .env
      #     echo "BUILD_TAG=1" > .env
      #     cat .env

      # - name: Build image
      #   run: docker compose -f docker-compose.yml build

      # - name: echo env
      #   run: echo 1

      # - name: test images
      #   run: | 
      #     docker images

      # - name: test
        # run: source environment.sh envsubst < aks-config.yaml.template > aks-config.yaml |
          # cat aks-config.yaml

      # - name: Push Docker image to Azure Container Registry
      #   run: |
      #     docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:1
      #     docker push ${{ secrets.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:1

      # - name: Apply Kubernetes manifest file
      #   run: |
      #     export BUILD_TAG=1
      #     envsubst < manifests/templates/aks-config.yml | kubectl apply -f - -n ep-mern --kubeconfig=config.yml
      #     envsubst < manifests/templates/config-map.yml | kubectl apply -f - -n ep-mern --kubeconfig=config.yml
      #     envsubst < manifests/templates/ingress-config.yml | kubectl apply -f - -n ep-mern --kubeconfig=config.yml
